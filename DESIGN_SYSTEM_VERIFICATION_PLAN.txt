================================================================================
DESIGN SYSTEM VERIFICATION PLAN
================================================================================
Purpose: Step-by-step plan to verify that refactored apps match the MM design
system specifications as documented in DESIGN_SYSTEM_TOKENS.txt

This plan includes both visual inspection and automated style checks.

================================================================================
PART 1: VISUAL VERIFICATION CHECKLIST
================================================================================

1.1 TYPOGRAPHY VERIFICATION
--------------------------------------------------------------------------------
☐ FONTS LOADED
  - Open browser DevTools > Network tab
  - Verify /fonts/National-2-Condensed-Bold.ttf loads successfully
  - Verify /fonts/ESKlarheitGrotesk-Rg.otf loads successfully
  - Check for 200 OK status on font files

☐ HEADING FONT FAMILY
  - Inspect h1, h2, h3, h4, h5, h6 elements
  - Computed style should show: National2Condensed, "Arial Black", sans-serif
  - If font is not loaded, should fall back to Arial Black

☐ BODY FONT FAMILY
  - Inspect <body> and <p> elements
  - Computed style should show: ESKlarheit, Inter, system-ui, sans-serif
  - If font is not loaded, should fall back to Inter

☐ HEADING SIZES (Desktop)
  - h1: 40px (2.5rem)
  - h2: 32px (2rem)
  - h3: 24px (1.5rem)
  - h4: 20px (1.25rem)
  - h5: 16px (1rem)
  - h6: 14px (0.875rem)

☐ HEADING SIZES (Mobile - resize browser to < 768px)
  - h1: 32px (2rem)
  - h2: 24px (1.5rem)
  - h3: 20px (1.25rem)

☐ HEADING STYLES
  - Font weight: 700 (bold)
  - Line height: 1.2
  - Letter spacing: -0.02em

☐ BODY TEXT STYLES
  - Font size: 16px (1rem)
  - Line height: 1.6
  - Letter spacing: 0


1.2 COLOR VERIFICATION - LIGHT MODE
--------------------------------------------------------------------------------
☐ TOGGLE TO LIGHT MODE
  - Use theme toggle to switch to light mode
  - Verify mode is active (check html class or data-theme attribute)

☐ BRAND COLORS VISIBLE
  - Find elements using .text-mm-primary or brand blue
  - Verify color is #337def (RGB: 51, 125, 239)
  - Find elements using .text-mm-secondary or brand yellow
  - Verify color is #fcc729 (RGB: 252, 199, 41)

☐ BACKGROUND COLOR
  - Inspect <body> element
  - Background should be white: #ffffff or hsl(0, 0%, 100%)

☐ FOREGROUND/TEXT COLOR
  - Inspect main text elements
  - Color should be nearly black: #0a0a0a or hsl(0, 0%, 3.9%)

☐ CARD BACKGROUNDS
  - Inspect card elements
  - Background should be white: #ffffff

☐ BORDERS
  - Inspect card, input, or divider borders
  - Border color should be light gray: #e5e5e5 or hsl(0, 0%, 89.8%)

☐ MUTED TEXT
  - Inspect placeholder text or secondary information
  - Color should be medium gray: #737373 or hsl(0, 0%, 45.1%)

☐ PRIMARY BUTTONS
  - Background should be brand blue: #337def
  - Text color should be white: #ffffff


1.3 COLOR VERIFICATION - DARK MODE
--------------------------------------------------------------------------------
☐ TOGGLE TO DARK MODE
  - Use theme toggle to switch to dark mode
  - Verify mode is active (check .dark class on html element)

☐ BACKGROUND COLOR
  - Inspect <body> element
  - Background should be dark: #1f1f1f or hsl(0, 0%, 12%)

☐ FOREGROUND/TEXT COLOR
  - Inspect main text elements
  - Color should be white: #ffffff or hsl(0, 0%, 100%)

☐ CARD BACKGROUNDS
  - Inspect card elements
  - Background should be slightly lighter than body: #292929 or hsl(0, 0%, 16%)

☐ BORDERS
  - Inspect card, input, or divider borders
  - Border color should be dark gray: #333333 or hsl(0, 0%, 20%)

☐ MUTED TEXT
  - Inspect placeholder text or secondary information
  - Color should be gray: #ababab or hsl(0, 0%, 67%)

☐ PRIMARY BUTTONS
  - Background should still be brand blue: #337def (same as light mode)
  - Text color should be white: #ffffff

☐ INPUT BACKGROUNDS
  - Inspect input fields in dark mode
  - Should have semi-transparent dark background
  - Verify color-mix is being used for 50% transparency


1.4 BORDER RADIUS VERIFICATION
--------------------------------------------------------------------------------
☐ PRIMARY BUTTONS (.btn-mm)
  - Border radius should be 100px (pill shape)
  - Verify with DevTools computed styles

☐ SECONDARY BUTTONS (.btn-secondary)
  - Border radius should be 100px (pill shape)

☐ CARDS
  - Border radius should be 8px (0.5rem)

☐ INPUTS
  - Border radius should be 8px (0.5rem)

☐ MODALS
  - Border radius should be 8px (0.5rem)

☐ GENERAL ELEMENTS
  - Check that no elements have border-radius values other than:
    - 100px (buttons)
    - 8px / 0.5rem (cards, inputs, modals)
    - 0 (sharp corners where intentional)


1.5 SPACING VERIFICATION
--------------------------------------------------------------------------------
☐ BUTTON PADDING
  - Primary and secondary buttons: 12px vertical, 24px horizontal
  - Verify with DevTools: padding: 0.75rem 1.5rem

☐ INPUT PADDING
  - Text inputs: 12px all around
  - Verify: padding: 0.75rem

☐ CARD PADDING
  - Cards: 24px all around
  - Verify: padding: 1.5rem

☐ BUTTON GAPS (icon + text)
  - Gap between icon and text: 8px
  - Verify: gap: 0.5rem

☐ RESPONSIVE BREAKPOINT
  - Resize browser to 768px width
  - Verify mobile styles activate at this breakpoint


1.6 COMPONENT VERIFICATION
--------------------------------------------------------------------------------
☐ PRIMARY BUTTON HOVER
  - Hover over primary button
  - Should increase brightness (filter: brightness(1.1))
  - Should translate up by 1px (transform: translateY(-1px))

☐ PRIMARY BUTTON ACTIVE
  - Click and hold primary button
  - Should translate down by 1px (transform: translateY(1px))

☐ SECONDARY BUTTON HOVER
  - Hover over secondary button
  - Border should change to primary blue color
  - Text should change to primary blue color

☐ INPUT FOCUS
  - Click/tab into an input field
  - Border should change to primary blue: #337def
  - Should show a blue box-shadow ring: 0 0 0 2px hsl(var(--ring) / 0.2)

☐ CARD HOVER
  - Hover over a card element
  - Border should change to semi-transparent primary: hsl(var(--primary) / 0.3)

☐ NAV ITEM HOVER
  - Hover over sidebar navigation items
  - Background should change to accent color
  - Text color should change from muted to foreground

☐ NAV ITEM ACTIVE
  - Find active navigation item
  - Background should be primary blue
  - Text should be white
  - Font weight should be 500 (medium)


1.7 ANIMATION VERIFICATION
--------------------------------------------------------------------------------
☐ TRANSITION DURATIONS
  - Button hover effects: 0.2s
  - Input focus effects: 0.2s
  - Card hover effects: 0.2s
  - Modal appearance: 0.3s

☐ FADE IN ANIMATION
  - Load a page with .animate-fade-in elements
  - Should fade from opacity 0 to 1 over 0.5s

☐ SLIDE UP ANIMATION
  - Open a modal with .animate-slide-up
  - Should slide up from below while fading in over 0.3s

☐ SMOOTH TRANSITIONS
  - All color changes should be smooth
  - No jarring instant changes unless intentional


1.8 ACCESSIBILITY VERIFICATION
--------------------------------------------------------------------------------
☐ FOCUS VISIBLE STATES
  - Tab through interactive elements
  - Each should show a visible focus indicator
  - Focus ring should be blue with 2px width

☐ COLOR CONTRAST (use browser extension or online tool)
  - Background vs Foreground: Should pass WCAG AA (4.5:1 minimum)
  - Primary button text on blue background: Should pass
  - Secondary foreground on yellow background: Should pass

☐ KEYBOARD NAVIGATION
  - Can navigate entire UI with keyboard only
  - Tab order is logical
  - Enter/Space activates buttons

☐ SCREEN READER LABELS
  - Interactive elements have aria-labels or visible text
  - Icons have aria-label attributes


================================================================================
PART 2: AUTOMATED STYLE CHECKS
================================================================================

2.1 CSS VARIABLE INSPECTION
--------------------------------------------------------------------------------
Run this in browser DevTools console:

```javascript
// Check if all CSS variables are defined
const root = document.documentElement;
const computedStyles = getComputedStyle(root);

const requiredVars = [
  // Brand colors
  '--color-mm-primary',
  '--color-mm-secondary',
  '--color-mm-dark',
  '--color-mm-dark2',
  '--color-mm-white',
  '--color-mm-gray',

  // Semantic colors
  '--background',
  '--foreground',
  '--card',
  '--card-foreground',
  '--primary',
  '--primary-foreground',
  '--secondary',
  '--secondary-foreground',
  '--muted',
  '--muted-foreground',
  '--accent',
  '--accent-foreground',
  '--destructive',
  '--destructive-foreground',
  '--border',
  '--input',
  '--ring',

  // Typography
  '--font-family-heading',
  '--font-family-body',

  // Border radius
  '--radius-mm',
  '--radius-card',
  '--radius-input',
  '--radius',

  // Transitions
  '--transition-fast',
  '--transition-medium',
  '--transition-slow'
];

const missing = [];
requiredVars.forEach(varName => {
  const value = computedStyles.getPropertyValue(varName).trim();
  if (!value) {
    missing.push(varName);
  } else {
    console.log(`✓ ${varName}: ${value}`);
  }
});

if (missing.length > 0) {
  console.error('❌ Missing CSS variables:', missing);
} else {
  console.log('✅ All required CSS variables are defined!');
}
```

☐ Run the script and verify all variables are defined
☐ Check that no variables return empty strings


2.2 COLOR VALUE VERIFICATION
--------------------------------------------------------------------------------
Run this in browser DevTools console:

```javascript
// Verify exact brand color values
const root = document.documentElement;
const computedStyles = getComputedStyle(root);

const brandColors = {
  '--color-mm-primary': '#337def',
  '--color-mm-secondary': '#fcc729',
  '--color-mm-dark': '#1f1f1f',
  '--color-mm-dark2': '#2a2a2a',
  '--color-mm-white': '#ffffff',
  '--color-mm-gray': '#ababab'
};

let allMatch = true;
Object.entries(brandColors).forEach(([varName, expected]) => {
  const actual = computedStyles.getPropertyValue(varName).trim();
  const match = actual.toLowerCase() === expected.toLowerCase();

  if (match) {
    console.log(`✓ ${varName}: ${actual}`);
  } else {
    console.error(`❌ ${varName}: Expected ${expected}, got ${actual}`);
    allMatch = false;
  }
});

if (allMatch) {
  console.log('✅ All brand colors match!');
}
```

☐ Run the script and verify all brand colors match exactly


2.3 FONT VERIFICATION SCRIPT
--------------------------------------------------------------------------------
Run this in browser DevTools console:

```javascript
// Check if custom fonts are loaded
const headingFont = getComputedStyle(document.querySelector('h1')).fontFamily;
const bodyFont = getComputedStyle(document.body).fontFamily;

console.log('Heading font:', headingFont);
console.log('Body font:', bodyFont);

if (headingFont.includes('National2Condensed')) {
  console.log('✅ Heading font loaded correctly');
} else {
  console.error('❌ Heading font not using National2Condensed');
}

if (bodyFont.includes('ESKlarheit')) {
  console.log('✅ Body font loaded correctly');
} else {
  console.error('❌ Body font not using ESKlarheit');
}

// Check if font files actually loaded
document.fonts.ready.then(() => {
  const fonts = Array.from(document.fonts);
  console.log('Loaded fonts:', fonts.map(f => f.family));

  const hasNational = fonts.some(f => f.family === 'National2Condensed');
  const hasKlarheit = fonts.some(f => f.family === 'ESKlarheit');

  if (hasNational && hasKlarheit) {
    console.log('✅ Both custom fonts are loaded');
  } else {
    console.warn('⚠️  One or both fonts may not be loaded');
  }
});
```

☐ Run the script and verify both fonts are loaded


2.4 BORDER RADIUS VERIFICATION SCRIPT
--------------------------------------------------------------------------------
Run this in browser DevTools console:

```javascript
// Verify button border radius
const primaryBtn = document.querySelector('.btn-mm, button[class*="btn"]');
const card = document.querySelector('.card-mm, [class*="card"]');
const input = document.querySelector('.input-mm, input');

if (primaryBtn) {
  const btnRadius = getComputedStyle(primaryBtn).borderRadius;
  console.log('Button border-radius:', btnRadius);
  if (btnRadius === '100px') {
    console.log('✅ Button has correct 100px radius');
  } else {
    console.error('❌ Button should have 100px radius, got:', btnRadius);
  }
}

if (card) {
  const cardRadius = getComputedStyle(card).borderRadius;
  console.log('Card border-radius:', cardRadius);
  if (cardRadius === '8px' || cardRadius === '0.5rem') {
    console.log('✅ Card has correct 8px radius');
  } else {
    console.error('❌ Card should have 8px radius, got:', cardRadius);
  }
}

if (input) {
  const inputRadius = getComputedStyle(input).borderRadius;
  console.log('Input border-radius:', inputRadius);
  if (inputRadius === '8px' || inputRadius === '0.5rem') {
    console.log('✅ Input has correct 8px radius');
  } else {
    console.error('❌ Input should have 8px radius, got:', inputRadius);
  }
}
```

☐ Run the script and verify border radius values are correct


2.5 DARK MODE TOGGLE VERIFICATION
--------------------------------------------------------------------------------
Run this in browser DevTools console:

```javascript
// Test dark mode toggle
const html = document.documentElement;

console.log('Initial theme:', html.classList.contains('dark') ? 'dark' : 'light');

// Toggle theme
const toggleBtn = document.querySelector('[aria-label*="theme" i], [class*="theme" i]');
if (toggleBtn) {
  console.log('Theme toggle button found');

  // Log background color before toggle
  const bgBefore = getComputedStyle(document.body).backgroundColor;
  console.log('Background before:', bgBefore);

  // Simulate click
  toggleBtn.click();

  // Wait a bit for transition
  setTimeout(() => {
    const bgAfter = getComputedStyle(document.body).backgroundColor;
    console.log('Background after:', bgAfter);

    if (bgBefore !== bgAfter) {
      console.log('✅ Theme toggle is working');
    } else {
      console.error('❌ Theme toggle may not be working properly');
    }
  }, 500);
} else {
  console.error('❌ Theme toggle button not found');
}
```

☐ Run the script and verify theme toggle works


================================================================================
PART 3: FILE-BASED VERIFICATION
================================================================================

3.1 VERIFY CSS IMPORTS
--------------------------------------------------------------------------------
☐ Check that globals.css imports color-tokens.css
  - Open: design-system/styles/globals.css or app/globals.css
  - Should contain: @import "./color-tokens.css";

☐ Check that tailwind is imported
  - Should contain: @import "tailwindcss"; (or @tailwind directives)

☐ Verify font files exist
  - /public/fonts/National-2-Condensed-Bold.ttf exists
  - /public/fonts/ESKlarheitGrotesk-Rg.otf exists


3.2 VERIFY TAILWIND CONFIG
--------------------------------------------------------------------------------
☐ Open tailwind.config.ts or tailwind.config.js
☐ Verify darkMode is set to: "class" or ["class", '[data-theme="dark"]']
☐ Verify theme.extend includes:
  - colors with semantic tokens
  - borderRadius with mm, card, input values
  - fontFamily with heading and body


3.3 CHECK FOR HARDCODED VALUES
--------------------------------------------------------------------------------
Use grep/search to find potential issues:

☐ Search for hardcoded hex colors (excluding config files):
  ```bash
  grep -r "#[0-9a-fA-F]\{6\}" --include="*.tsx" --include="*.jsx" --exclude-dir=node_modules
  ```
  - Review results: most should be in config/token files only
  - Component files should use CSS variables

☐ Search for hardcoded px border-radius (excluding 100px for buttons):
  ```bash
  grep -r "border-radius:.*px" --include="*.tsx" --include="*.jsx" --include="*.css" --exclude-dir=node_modules
  ```
  - Should mostly be 100px (buttons) or using CSS variables

☐ Search for inline font-family declarations:
  ```bash
  grep -r "font-family:" --include="*.tsx" --include="*.jsx" --exclude-dir=node_modules
  ```
  - Should use var(--font-family-heading) or var(--font-family-body)


3.4 VERIFY NO CONFLICTING STYLES
--------------------------------------------------------------------------------
☐ Check for !important overrides (can cause issues):
  ```bash
  grep -r "!important" --include="*.css" --exclude-dir=node_modules
  ```
  - Review: should only be in utility layer for semantic color fixes

☐ Check for duplicate CSS variable definitions:
  - Open color-tokens.css
  - Ensure variables are defined once in :root for light mode
  - Ensure variables are defined once in .dark for dark mode


================================================================================
PART 4: COMPONENT-SPECIFIC TESTS
================================================================================

4.1 BUTTON COMPONENT TEST
--------------------------------------------------------------------------------
☐ Create a test page with all button variants:
  ```html
  <button class="btn-mm">Primary Button</button>
  <button class="btn-secondary">Secondary Button</button>
  <button class="btn-mm" disabled>Disabled Primary</button>
  ```

☐ Verify each button:
  - Has 100px border radius
  - Has correct colors
  - Has hover state
  - Has active state (press and hold)
  - Disabled state has 50% opacity


4.2 INPUT COMPONENT TEST
--------------------------------------------------------------------------------
☐ Create test inputs:
  ```html
  <input type="text" class="input-mm" placeholder="Test input" />
  <input type="text" class="input-mm" value="Filled input" />
  <input type="text" class="input-mm" disabled placeholder="Disabled" />
  ```

☐ Verify:
  - Border color: hsl(var(--input))
  - Focus ring appears on focus
  - Placeholder is muted color
  - Dark mode background is semi-transparent
  - Disabled input has 50% opacity


4.3 CARD COMPONENT TEST
--------------------------------------------------------------------------------
☐ Create test cards:
  ```html
  <div class="card-mm">Standard Card</div>
  <div class="glass-card">Glass Effect Card</div>
  ```

☐ Verify:
  - 8px border radius
  - Border color matches design system
  - Background matches --card variable
  - Hover state changes border color
  - Glass card has backdrop filter blur


4.4 NAVIGATION COMPONENT TEST
--------------------------------------------------------------------------------
☐ Verify sidebar items:
  - Default state: muted foreground color
  - Hover state: accent background, foreground color
  - Active state: primary background, white text

☐ Verify mobile nav items:
  - Smaller text (0.75rem)
  - Flex column layout
  - Active state shows primary color


================================================================================
PART 5: CROSS-BROWSER TESTING
================================================================================

5.1 BROWSER COMPATIBILITY
--------------------------------------------------------------------------------
☐ Test in Chrome/Edge (Chromium)
  - All styles render correctly
  - Fonts load properly
  - Dark mode toggle works

☐ Test in Firefox
  - CSS variables work
  - color-mix() function works (or has fallback)
  - Backdrop filter works (or has fallback)

☐ Test in Safari
  - Custom fonts load
  - -webkit-backdrop-filter works
  - Color rendering is consistent


5.2 RESPONSIVE TESTING
--------------------------------------------------------------------------------
☐ Test at 1920px (Desktop)
  - All spacing looks correct
  - Typography is readable
  - No horizontal scrolling

☐ Test at 1024px (Tablet)
  - Layout adjusts appropriately
  - Typography scales down if needed

☐ Test at 768px (Mobile breakpoint)
  - Mobile heading sizes activate (h1: 2rem, h2: 1.5rem, h3: 1.25rem)
  - Mobile navigation appears
  - Cards/buttons are full width or stack

☐ Test at 375px (Mobile)
  - All content is accessible
  - No text overflow
  - Touch targets are adequate (min 44px)


================================================================================
PART 6: REGRESSION TESTING
================================================================================

6.1 SCREENSHOT COMPARISON
--------------------------------------------------------------------------------
☐ Take "before" screenshots of key pages (before refactor)
☐ Take "after" screenshots of same pages (after refactor)
☐ Compare side-by-side:
  - Colors should match design system
  - Spacing should be more consistent
  - Border radius should be standardized
  - Fonts should be correct

☐ Check for unintended changes:
  - Layout should not be broken
  - Content should not be cut off
  - Functionality should still work


6.2 FUNCTIONALITY TESTING
--------------------------------------------------------------------------------
☐ All interactive elements still work:
  - Buttons trigger expected actions
  - Forms can be submitted
  - Navigation links work
  - Modals open and close

☐ Animations still work:
  - Page transitions
  - Button hover effects
  - Modal animations
  - Loading states


================================================================================
PART 7: PERFORMANCE CHECKS
================================================================================

7.1 FONT LOADING PERFORMANCE
--------------------------------------------------------------------------------
☐ Check font file sizes:
  - National-2-Condensed-Bold.ttf: < 200KB
  - ESKlarheitGrotesk-Rg.otf: < 200KB

☐ Verify font-display: swap is set
  - Prevents FOIT (Flash of Invisible Text)
  - Shows fallback font while loading

☐ Check for FOUT (Flash of Unstyled Text)
  - Should be minimal due to font-display: swap
  - Consider font preloading if needed


7.2 CSS PERFORMANCE
--------------------------------------------------------------------------------
☐ Check total CSS file size:
  - Should be reasonable (< 100KB uncompressed)
  - Verify gzip compression is enabled in production

☐ Check for unused CSS:
  - Run coverage analysis in DevTools
  - Consider purging unused Tailwind classes


================================================================================
PART 8: FINAL SIGN-OFF CHECKLIST
================================================================================

TYPOGRAPHY
  ☐ Custom fonts load correctly
  ☐ Heading sizes match spec (desktop and mobile)
  ☐ Line heights and letter spacing are correct
  ☐ Font weights are correct (heading: 700, body: 400)

COLORS
  ☐ Brand colors match exact hex values
  ☐ Light mode semantic colors are correct
  ☐ Dark mode semantic colors are correct
  ☐ Theme toggle switches all colors properly
  ☐ No hardcoded colors in component files

SPACING & LAYOUT
  ☐ Button padding is 0.75rem 1.5rem
  ☐ Input padding is 0.75rem
  ☐ Card padding is 1.5rem
  ☐ Gaps use consistent values (0.5rem, 1rem, etc.)

BORDER RADIUS
  ☐ Primary buttons have 100px radius
  ☐ Cards have 8px radius
  ☐ Inputs have 8px radius
  ☐ No inconsistent border radius values

COMPONENTS
  ☐ Buttons match design system
  ☐ Inputs match design system
  ☐ Cards match design system
  ☐ Navigation matches design system
  ☐ Modals match design system
  ☐ Tables match design system

INTERACTIONS
  ☐ Hover states work correctly
  ☐ Focus states are visible
  ☐ Active states work correctly
  ☐ Disabled states show correctly
  ☐ Transitions are smooth (0.2s-0.5s)

ACCESSIBILITY
  ☐ Color contrast passes WCAG AA
  ☐ Focus indicators are visible
  ☐ Keyboard navigation works
  ☐ Screen reader labels present

RESPONSIVE
  ☐ Mobile breakpoint activates at 768px
  ☐ Typography scales on mobile
  ☐ Layout adapts on small screens
  ☐ Touch targets are adequate

CROSS-BROWSER
  ☐ Works in Chrome
  ☐ Works in Firefox
  ☐ Works in Safari
  ☐ Works on iOS Safari (if applicable)

PERFORMANCE
  ☐ Fonts load efficiently
  ☐ No layout shift during font loading
  ☐ CSS file size is reasonable
  ☐ No performance regressions


================================================================================
VERIFICATION COMPLETE
================================================================================

Once all items are checked, the refactored app matches the MM design system.

If any issues are found:
1. Document the issue with screenshots
2. Reference the specific token in DESIGN_SYSTEM_TOKENS.txt
3. Fix the issue in the component
4. Re-run the relevant verification step
5. Update this checklist

For ongoing maintenance:
- Re-run this verification after major updates
- Add new components to the verification plan
- Keep DESIGN_SYSTEM_TOKENS.txt as the source of truth
