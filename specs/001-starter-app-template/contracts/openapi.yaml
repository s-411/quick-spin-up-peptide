openapi: 3.0.3
info:
  title: Starter App Template API
  description: API specification for the Next.js starter app template with Supabase, Stripe, and RAG integrations
  version: 1.0.0
  contact:
    name: Starter Template Support
    email: support@example.com

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://your-app.vercel.app/api
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supabase JWT token

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        avatar_url:
          type: string
          format: uri
        subscription_status:
          type: string
          enum: [free, active, past_due, canceled, trialing]
        theme_preference:
          type: string
          enum: [light, dark, system]
        onboarding_completed:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        file_name:
          type: string
        file_size:
          type: integer
          minimum: 1
        file_type:
          type: string
          enum: [application/pdf, text/plain, text/markdown]
        upload_status:
          type: string
          enum: [uploading, uploaded, failed]
        processing_status:
          type: string
          enum: [pending, processing, completed, failed]
        chunk_count:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ChatSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 100
        status:
          type: string
          enum: [active, archived, deleted]
        document_id:
          type: string
          format: uuid
          nullable: true
        message_count:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ChatMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
          maxLength: 10000
        token_count:
          type: integer
          minimum: 1
          nullable: true
        processing_time_ms:
          type: integer
          minimum: 1
          nullable: true
        created_at:
          type: string
          format: date-time

    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        stripe_subscription_id:
          type: string
        stripe_customer_id:
          type: string
        status:
          type: string
          enum: [trialing, active, past_due, canceled, unpaid]
        plan_id:
          type: string
        current_period_start:
          type: string
          format: date-time
        current_period_end:
          type: string
          format: date-time
        cancel_at_period_end:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string

    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
        checks:
          type: array
          items:
            type: object
            properties:
              service:
                type: string
              status:
                type: string
                enum: [healthy, unhealthy, degraded]
              responseTime:
                type: integer
              error:
                type: string

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check the health status of all integrated services
      security: []
      responses:
        '200':
          description: All services healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: Some or all services unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'

  /user/profile:
    get:
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: Update user profile
      description: Update user profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  maxLength: 50
                last_name:
                  type: string
                  maxLength: 50
                theme_preference:
                  type: string
                  enum: [light, dark, system]
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents:
    get:
      summary: List user documents
      description: Retrieve all documents uploaded by the authenticated user
      parameters:
        - name: status
          in: query
          description: Filter by processing status
          schema:
            type: string
            enum: [pending, processing, completed, failed]
        - name: limit
          in: query
          description: Maximum number of documents to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of documents to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Documents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

    post:
      summary: Upload document
      description: Upload a new document for processing
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                title:
                  type: string
                  maxLength: 255
              required:
                - file
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid file or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/{documentId}:
    get:
      summary: Get document details
      description: Retrieve details for a specific document
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete document
      description: Delete a document and all associated chunks
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Document deleted successfully
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chat/sessions:
    get:
      summary: List chat sessions
      description: Retrieve all chat sessions for the authenticated user
      parameters:
        - name: document_id
          in: query
          description: Filter by document ID
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by session status
          schema:
            type: string
            enum: [active, archived]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Chat sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatSession'

    post:
      summary: Create chat session
      description: Create a new chat session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 100
                document_id:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        '201':
          description: Chat session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'

  /chat/sessions/{sessionId}/messages:
    get:
      summary: Get chat messages
      description: Retrieve messages for a specific chat session
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: before
          in: query
          description: Get messages before this timestamp (for pagination)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatMessage'

    post:
      summary: Send chat message
      description: Send a message in a chat session and get AI response
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  maxLength: 10000
              required:
                - content
      responses:
        '200':
          description: Message sent and response generated
          content:
            text/plain:
              schema:
                type: string
                description: Streaming response from AI
        '400':
          description: Invalid message content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stripe/checkout:
    post:
      summary: Create Stripe checkout session
      description: Create a Stripe checkout session for subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price_id:
                  type: string
                  description: Stripe price ID
                success_url:
                  type: string
                  format: uri
                cancel_url:
                  type: string
                  format: uri
              required:
                - price_id
      responses:
        '200':
          description: Checkout session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkout_url:
                    type: string
                    format: uri
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stripe/portal:
    post:
      summary: Create customer portal session
      description: Create a Stripe customer portal session for subscription management
      responses:
        '200':
          description: Portal session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  portal_url:
                    type: string
                    format: uri
        '400':
          description: No active subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stripe/webhook:
    post:
      summary: Stripe webhook endpoint
      description: Handle Stripe webhook events
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Stripe webhook event
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook signature or payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /email/subscribe:
    post:
      summary: Subscribe to email list
      description: Subscribe user to marketing email list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                  maxLength: 50
                tags:
                  type: array
                  items:
                    type: string
                    maxLength: 50
              required:
                - email
      responses:
        '200':
          description: Successfully subscribed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid email or subscription failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'